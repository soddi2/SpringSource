/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2020-07-13 05:50:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class book_005finfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <meta\r\n");
      out.write("      name=\"viewport\"\r\n");
      out.write("      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\r\n");
      out.write("    />\r\n");
      out.write("    <link\r\n");
      out.write("      rel=\"stylesheet\"\r\n");
      out.write("      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\r\n");
      out.write("      integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\"\r\n");
      out.write("      crossorigin=\"anonymous\"\r\n");
      out.write("    />\r\n");
      out.write("    <!-- slim min을 그냥 min으로 교체 -->\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\" \r\n");
      out.write("    integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\" \r\n");
      out.write("    crossorigin=\"anonymous\">\r\n");
      out.write("    </script>\r\n");
      out.write("    <script\r\n");
      out.write("      src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"\r\n");
      out.write("      integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\"\r\n");
      out.write("      crossorigin=\"anonymous\"\r\n");
      out.write("    ></script>\r\n");
      out.write("    <title>도서 관리 시스템</title>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <div class=\"jumbotron\">\r\n");
      out.write("      <h3>Ajax로 구현한 도서관리시스템</h3>\r\n");
      out.write("    </div>\r\n");
      out.write("   \t<div class=\"container\"></div>>\r\n");
      out.write("\t\t<button type=\"button\" id=\"get\">도서 정보 가져오기</button>   \t\r\n");
      out.write("\t\t<button type=\"button\" id=\"remove\">도서 정보 삭제하기</button>   \t\r\n");
      out.write("\t\t<button type=\"button\" id=\"modify\">도서 정보 수정하기</button>   \t\r\n");
      out.write("   \t</div>\r\n");
      out.write("   \t<div id=\"result\">\r\n");
      out.write("   \t\t<table class=\"table\">\r\n");
      out.write("   \t\t\t\r\n");
      out.write("   \t\t</table>\r\n");
      out.write("   \t</div>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t//버튼이 눌러지면\r\n");
      out.write("\t$(\"#get\").click(function(){\r\n");
      out.write("\t\t//결과를 보여줄 위치 가져오기\r\n");
      out.write("\t\tlet result = $(\"#result table\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t// http://localhost:8080/1001 + get \r\n");
      out.write("\t// http://localhost:8080/code + get 요청을 한 후\r\n");
      out.write("\t// 서버가 보내주는 json데이터를 result에 테이블 형태로 보여주기\r\n");
      out.write("\t\t$.ajax({ //json형태로 보내기 때문에 rest컨트롤러가 있어야함\r\n");
      out.write("\t\t\turl : '1003',\r\n");
      out.write("\t\t\ttype : 'get',\r\n");
      out.write("\t\t\tsuccess:function(item){\r\n");
      out.write("\t\t\t\tconsole.log(item); //json 배열\r\n");
      out.write("\t\t\t\tlet str=\"\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\tstr += \"<tr><td>\";\r\n");
      out.write("\t\t\t\tstr += item.code+\"</td><td>\"+item.title+\"</td>\";\r\n");
      out.write("\t\t\t\tstr += \"<td>\"+item.writer+\"</td><td>\"+item.price+\"</td><td>\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tresult.html(str); \r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\t\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t//삭제하기\r\n");
      out.write("\t$(\"#remove\").click(function(){\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : '555',\r\n");
      out.write("\t\t\ttype : 'delete',\r\n");
      out.write("\t\t\tsuccess:function(data){ // 200 : 성공~\r\n");
      out.write("\t\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\talert(data);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror:function(xhr,txtStatus,error){ //400 : 실패~\r\n");
      out.write("\t\t\t\talert(xhr.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t//수정하기\r\n");
      out.write("\t//JSON.stringify() : 클라이언트 측에서 서버로 데이터를 보낼때 사용 자바스크립트 객체를 변환 시켜서 보내줌\r\n");
      out.write("\t$(\"#modify\").click(function(){\r\n");
      out.write("\t\t//코드랑 가격  => \r\n");
      out.write("\t\tlet param = { //json 타입으로 넘겨서 처리\r\n");
      out.write("\t\t\t\tcode : '1003',\r\n");
      out.write("\t\t\t\tprice : 10000000\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : '/modify',\r\n");
      out.write("\t\t\ttype : 'put',\r\n");
      out.write("\t\t\tcontentType : \"application/json\",\r\n");
      out.write("\t\t\tdata : JSON.stringify(param),\r\n");
      out.write("\t\t\tsuccess:function(data){ \r\n");
      out.write("\t\t\t\talert(data);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror:function(xhr,txtStatus,error){ \r\n");
      out.write("\t\t\t\talert(xhr.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t})\r\n");
      out.write("})\n");
      out.write("</script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
