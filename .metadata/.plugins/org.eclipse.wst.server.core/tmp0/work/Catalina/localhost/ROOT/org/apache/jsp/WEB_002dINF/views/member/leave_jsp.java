/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2020-07-14 00:57:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class leave_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\r\n");
      out.write("<!-- 실패시 알림 -->\r\n");
      out.write("<script> \r\n");
      out.write("   \tlet msg = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${error}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("   \tconsole.log(msg);\r\n");
      out.write("   \tif(msg != ''){\r\n");
      out.write("   \t\talert(msg);\r\n");
      out.write("   \t}\r\n");
      out.write("</script>\r\n");
      out.write("<form>\r\n");
      out.write("\t<div class=\"card\"  style=\"width: 40rem;margin:40px auto;\">\t\r\n");
      out.write("\t\t<div class=\"card-header\">\r\n");
      out.write("\t    \t<h4>회원탈퇴</h4>\r\n");
      out.write("\t  \t</div>\r\n");
      out.write("\t \t<div class=\"card-body\">\t\r\n");
      out.write("\t\t\t<div class=\"form-group row justify-content-center\">\t\t\r\n");
      out.write("\t\t\t\t<div class=\"col-sm-10\">\t\r\n");
      out.write("\t\t\t\t\t<!-- value에 auth에 userid 값을 가져와서 담아 넣기 -->\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"userid\" id=\"userid\" class=\"form-control\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${auth.userid}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly/>\r\n");
      out.write("\t\t\t \t\t<small id=\"userid\" class=\"text-info\"></small>\t\t\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\t\r\n");
      out.write("\t\t\t<div class=\"form-group row justify-content-center\">\t\t\r\n");
      out.write("\t\t\t\t<div class=\"col-sm-10\">\t\r\n");
      out.write("\t\t\t\t\t<input type=\"password\" name=\"password\" id = \"password\" class=\"form-control\" placeholder=\"비밀번호\" autofocus=\"autofocus\"/>\r\n");
      out.write("\t\t\t\t\t<small id=\"current_password\" class=\"text-info\"></small>\r\n");
      out.write("\t\t\t\t</div>\t\r\n");
      out.write("\t\t\t</div>\t\t\t\t\r\n");
      out.write("\t\t\t<div class=\"form-group text-center\">\t\t\r\n");
      out.write("\t\t\t\t<button type=\"submit\" class=\"btn btn-primary\">탈퇴</button>\r\n");
      out.write("\t\t\t\t<!-- on클릭에 로케이션 달고 인덱스로 보내 줍니다 -->\r\n");
      out.write("\t\t\t\t    <button type=\"button\" class=\"btn btn-secondary\" id=\"leavecancel\" onclick=\"location.href='/'\">취소</button>\t\t\t\t\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\t\t\r\n");
      out.write("</form>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t//http://localhost:8080/leave + delete\r\n");
      out.write("\t\r\n");
      out.write("\t//json 형태로 보낸 후 성공하면 index로 이동하기\r\n");
      out.write("\t$(\".btn-primary\").click(function(e){ //누르면 가져오게\r\n");
      out.write("\t// userid와 password를 서버로 보내서 회원탈퇴\r\n");
      out.write("\tlet param = {\r\n");
      out.write("\t\t\tuserid : $(\"input[name='userid']\").val(),\r\n");
      out.write("\t\t\tpassword : $(\"input[name='password']\").val()\r\n");
      out.write("\t};\r\n");
      out.write("\t\te.preventDefault();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tconsole.log($(\"form\").serialize());\r\n");
      out.write("\t\t//폼안의 데이터를 json형태로 서버로 보개지 입력 후 결과를 받아 출력하기\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : '/leave', // http://localhost:8080//member/leave =>\r\n");
      out.write("\t\t\ttype : 'delete',\r\n");
      out.write("\t\t\tcontentType : \"application/json\",\r\n");
      out.write("\t\t\tdata : JSON.stringify(param), // $(\"form\").serialize()\r\n");
      out.write("\t\t\tsuccess:function(param){ // 200 : 성공~\r\n");
      out.write("\t\t\t\tconsole.log(param);\r\n");
      out.write("\t\t\t\talert(param);\r\n");
      out.write("\t\t\t\tlocation.href='/';\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror:function(xhr,txtStatus,error){ //400 : 실패~\r\n");
      out.write("\t\t\t\t//alert(xhr.responseText);\r\n");
      out.write("\t\t\t\tif(msg === 'fail') {\r\n");
      out.write("\t\t\t\t\talert('현재 비밀번호를 확인해 주세요');\r\n");
      out.write("\t\t\t\t\t$(\"#current_password\").val(\"\");\r\n");
      out.write("\t\t\t\t\t$(\"#current_password\").focus();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t})\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
