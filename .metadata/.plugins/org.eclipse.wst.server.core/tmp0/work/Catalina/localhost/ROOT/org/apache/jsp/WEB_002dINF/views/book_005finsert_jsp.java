/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.35
 * Generated at: 2020-07-13 06:16:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class book_005finsert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    <link\r\n");
      out.write("      rel=\"stylesheet\"\r\n");
      out.write("      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\r\n");
      out.write("      integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\"\r\n");
      out.write("      crossorigin=\"anonymous\"\r\n");
      out.write("    />\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\t<form>\t\r\n");
      out.write("\t  <div class=\"form-group\">\r\n");
      out.write("\t    <label for=\"code\">Code</label>\r\n");
      out.write("\t    <input type=\"text\" class=\"form-control\" name=\"code\" placeholder=\"code\" required=\"required\" autofocus>    \r\n");
      out.write("\t  </div>\r\n");
      out.write("\t  <div class=\"form-group\">\r\n");
      out.write("\t    <label for=\"title\">Title</label>\r\n");
      out.write("\t    <input type=\"text\" class=\"form-control\" name=\"title\" placeholder=\"title\" required=\"required\">\r\n");
      out.write("\t  </div>\r\n");
      out.write("\t  <div class=\"form-group\">\r\n");
      out.write("\t    <label for=\"author\">Author</label>\r\n");
      out.write("\t    <input type=\"text\" class=\"form-control\" name=\"writer\" placeholder=\"author\" required=\"required\">\r\n");
      out.write("\t  </div>\r\n");
      out.write("\t  <div class=\"form-group\">\r\n");
      out.write("\t    <label for=\"price\">Price</label>\r\n");
      out.write("\t    <input type=\"number\" class=\"form-control\" name=\"price\" placeholder=\"price\" required=\"required\">\r\n");
      out.write("\t  </div>\r\n");
      out.write("\t  <button type=\"submit\" class=\"btn btn-primary\">입력</button>\r\n");
      out.write("\t  <button type=\"reset\" class=\"btn btn-secondary\">취소</button>\t\r\n");
      out.write("\t</form>\t\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\t<!-- slim min을 그냥 min으로 교체 -->\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\" \r\n");
      out.write("    integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\" \r\n");
      out.write("    crossorigin=\"anonymous\">\r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$(\".btn-primary\").click(function(){\r\n");
      out.write("\t\t//입력 버튼을 클릭하면 폼안의 데이터를 가져온 후 \r\n");
      out.write("\t\tlet param = {\r\n");
      out.write("\t\t\t\tcode : $(\"input[name='code']\").val(),\r\n");
      out.write("\t\t\t\ttitle : $(\"input[name='title']\").val(),\r\n");
      out.write("\t\t\t\twriter : $(\"input[name='writer']\").val(),\r\n");
      out.write("\t\t\t\tprice : $(\"input[name='price']\").val()\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t//ajax를 이용해 서버로 전송한 후 결과 출력\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : '/insert',\r\n");
      out.write("\t\t\ttype : 'post',\r\n");
      out.write("\t\t\tcontentType : \"application/json\",\r\n");
      out.write("\t\t\tdata : JSON.stringify(param), //json\r\n");
      out.write("\t\t\tsuccess:function(data){ \r\n");
      out.write("\t\t\t\talert(data);\r\n");
      out.write("\t\t\t\t$(\"input[name='code']\").val(\"\");\r\n");
      out.write("\t\t\t\t$(\"input[name='title']\").val(\"\");\r\n");
      out.write("\t\t\t\t$(\"input[name='writer']\").val(\"\");\r\n");
      out.write("\t\t\t\t$(\"input[name='price']\").val(\"\");\r\n");
      out.write("\t\t\t\t$(\"input[name='code']\").focus();\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror:function(xhr,txtStatus,error){ \r\n");
      out.write("\t\t\t\talert(xhr.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t})\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
